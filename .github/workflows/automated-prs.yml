name: Automated pull request pipeline

on:
  schedule:
    - cron: "0 8 1,15 * *" # Run on the 1st and 15th of each month at 08:00 UTC
  workflow_dispatch:

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  create-staging-pr:
    name: Create develop to staging PR
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if branches exist
        id: check-branches
        run: |
          git fetch --all --prune

          if git show-ref --verify --quiet refs/remotes/origin/develop; then
            echo "develop_exists=true" >> $GITHUB_OUTPUT
          else
            echo "develop_exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Develop branch does not exist"
          fi

          if git show-ref --verify --quiet refs/remotes/origin/staging; then
            echo "staging_exists=true" >> $GITHUB_OUTPUT
          else
            if git show-ref --verify --quiet refs/remotes/origin/develop; then
              echo "Creating 'staging' branch from 'develop'..."
              git fetch origin develop:refs/remotes/origin/develop
              git checkout -b staging origin/develop
              git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} staging
              echo "staging_exists=true" >> $GITHUB_OUTPUT
              echo "::notice::Created 'staging' branch from 'develop'"
            else
              echo "staging_exists=false" >> $GITHUB_OUTPUT
              echo "::warning::Staging branch does not exist and cannot be created because 'develop' is missing"
            fi
          fi

      - name: Check for existing PR
        id: check-pr
        if: steps.check-branches.outputs.develop_exists == 'true' && steps.check-branches.outputs.staging_exists == 'true'
        run: |
          existing_pr=$(gh pr list --base staging --head develop --state open --json number --jq '.[0].number')
          if [ -n "$existing_pr" ]; then
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$existing_pr" >> $GITHUB_OUTPUT
            echo "::notice::PR #$existing_pr from develop to staging already exists"
          else
            echo "pr_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes between branches
        id: check-changes
        if: steps.check-branches.outputs.develop_exists == 'true' && steps.check-branches.outputs.staging_exists == 'true' && steps.check-pr.outputs.pr_exists == 'false'
        run: |
          git fetch origin develop:refs/remotes/origin/develop
          git fetch origin staging:refs/remotes/origin/staging

          changes=$(git rev-list --count origin/staging..origin/develop)
          if [ "$changes" -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "::notice::Found $changes commits to promote from develop to staging"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "::notice::No changes between develop and staging branches"
          fi

      - name: Create pull request
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          pr_title="Automated promotion: develop to staging"
          pr_body="This pull request has been created automatically to promote changes from \`develop\` into \`staging\`.

          > [!WARNING]
          > Merging this PR will trigger an automatic deployment to the staging environment. This may affect services running in staging.

          ### Required before merging
          - [ ] Ensure the automated tests have passed for the commits included.
          - [ ] Review all code changes and confirm reviewers are satisfied.
          - [ ] Confirm any deployment-related settings or environment variables required for staging are present and correct.
          - [ ] Review and approve database migrations (if any) for staging compatibility.
          - [ ] Verify feature flags and configuration changes where applicable.

          ### Post-merge checks
          - [ ] Monitor staging for regressions and core functionality after deployment.
          - [ ] Run any manual or integration tests not covered by CI.
          - [ ] Notify QA/stakeholders that staging has been updated.

          ---

          _If you are unsure about the scope of changes, do not merge â€” request further review._"

          gh pr create \
            --title "$pr_title" \
            --body "$pr_body" \
            --base staging \
            --head develop \
            --label "needs review,release"

  create-production-pr:
    name: Create staging to main PR
    runs-on: ubuntu-latest
    needs: create-staging-pr
    permissions:
      actions: read
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if branches exist
        id: check-branches
        run: |
          git fetch --all --prune

          if git show-ref --verify --quiet refs/remotes/origin/staging; then
            echo "staging_exists=true" >> $GITHUB_OUTPUT
          else
            echo "staging_exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Staging branch does not exist"
          fi

          if git show-ref --verify --quiet refs/remotes/origin/main; then
            echo "main_exists=true" >> $GITHUB_OUTPUT
          else
            if git show-ref --verify --quiet refs/remotes/origin/staging; then
              echo "Creating 'main' branch from 'staging'..."
              git fetch origin staging:refs/remotes/origin/staging
              git checkout -b main origin/staging
              git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} main
              echo "main_exists=true" >> $GITHUB_OUTPUT
              echo "::notice::Created 'main' branch from 'staging'"
            else
              echo "main_exists=false" >> $GITHUB_OUTPUT
              echo "::warning::Main branch does not exist and cannot be created because 'staging' is missing"
            fi
          fi

      - name: Check for existing PR
        id: check-pr
        if: steps.check-branches.outputs.staging_exists == 'true' && steps.check-branches.outputs.main_exists == 'true'
        run: |
          existing_pr=$(gh pr list --base main --head staging --state open --json number --jq '.[0].number')
          if [ -n "$existing_pr" ]; then
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$existing_pr" >> $GITHUB_OUTPUT
            echo "::notice::PR #$existing_pr from staging to main already exists"
          else
            echo "pr_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes between branches
        id: check-changes
        if: steps.check-branches.outputs.staging_exists == 'true' && steps.check-branches.outputs.main_exists == 'true' && steps.check-pr.outputs.pr_exists == 'false'
        run: |
          git fetch origin staging:refs/remotes/origin/staging
          git fetch origin main:refs/remotes/origin/main

          changes=$(git rev-list --count origin/main..origin/staging)
          if [ "$changes" -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "::notice::Found $changes commits to promote from staging to main"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "::notice::No changes between staging and main branches"
          fi

      - name: Create pull request
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          pr_title="Automated release: staging to main"
          pr_body="This pull request has been created automatically to promote changes from \`staging\` into \`main\` for release to production.

          > [!CAUTION]
          > Merging this PR will trigger an automatic deployment to production and will affect live users. Treat this as a production release and follow the pre-release checklist below.

          ### Pre-release checklist (required)
          - [ ] All staging tests have passed and any outstanding issues are resolved.
          - [ ] Security review completed where applicable.
          - [ ] Release notes and changelog entries prepared and reviewed.
          - [ ] Any database migrations have been reviewed and approved for production.
          - [ ] Production configuration and secrets are confirmed.
          - [ ] Deployment and rollback plan is in place and has been communicated to the team.

          ### Post-release actions
          - [ ] Monitor production closely for errors and performance regressions.
          - [ ] Verify dependent services are operational.
          - [ ] Tag the release and update the changelog.
          - [ ] Communicate the release to stakeholders.

          ---

          _Only merge when all pre-release items are complete._"

          gh pr create \
            --title "$pr_title" \
            --body "$pr_body" \
            --base main \
            --head staging \
            --label "needs review,release"
