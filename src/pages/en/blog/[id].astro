---
import { Picture } from "astro:assets";
import { getCollection, render } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import PixelarticonsCalendar from "../../../components/icons/PixelarticonsCalendar.astro";
import PixelarticonsClock from "../../../components/icons/PixelarticonsClock.astro";
import PixelarticonsHumanHandsup from "../../../components/icons/PixelarticonsHumanHandsup.astro";
import SidebarBase from "../../../components/navigation/SidebarBase.astro";
import LayoutBase from "../../../layouts/LayoutBase.astro";

const { post } = Astro.props;
const { Content } = await render(post);
const locale = (Astro.currentLocale as "en" | "sv") ?? "en";

export async function getStaticPaths() {
  const posts = await getCollection(
    "blogCollection",
    ({ data, id }) => !data.draft && id.includes("en/"),
  );
  return posts.map((post) => {
    const id = post.id.includes("/")
      ? post.id.split("/").slice(1).join("/")
      : post.id;
    return {
      params: { id },
      props: { post },
    };
  });
}

const authors = await Promise.all(
  post.data.author.map((authorRef) =>
    getCollection("authorCollection").then((authors) =>
      authors.find((author) => author.id === authorRef.id),
    ),
  ),
);

const calculateReadTime = (content: string) => {
  const wordCount = content.split(/\s+/).length;
  return Math.ceil(wordCount / 200);
};

const formattedDate = new Date(post.data.publishedDate).toLocaleDateString(
  locale,
  {
    year: "numeric",
    month: "long",
    day: "numeric",
  },
);

const articleSchema = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.url,
  },
  headline: post.data.title,
  description: post.data.description,
  image: post.data.thumbnailImg.src,
  author: authors.map((author) => ({
    "@type": "Person",
    name: author?.data.name,
  })),
  publisher: {
    "@type": "Organization",
    name: "HallinMedia",
  },
  datePublished: new Date(post.data.publishedDate).toISOString(),
  dateModified: new Date(post.data.publishedDate).toISOString(),
};
---

<LayoutBase schema={articleSchema} adId="blog-post">
  <SidebarBase showLogo showReturn slot="sidebar">
    <div slot="content">
      <div class="space-y-8">
        <div class="space-y-2 text-xs">
          <div class="flex items-center gap-1 text-stone-500">
            <PixelarticonsClock aria-hidden="true" class="h-4 w-4" />
            <span>
              {calculateReadTime(post.body || "")}
              min read
            </span>
          </div>

          <time
            datetime={post.data.publishedDate}
            class="flex items-center gap-1 text-stone-500"
          >
            <PixelarticonsCalendar aria-hidden="true" class="h-4 w-4" />
            {formattedDate}
          </time>
        </div>

        <div class="space-y-2">
          <div class="flex items-center gap-1 text-stone-500">
            <PixelarticonsHumanHandsup aria-hidden="true" class="h-4 w-4" />
            <span class="text-sm"> Published by </span>
          </div>

          <div class="space-y-2">
            {
              authors.filter(Boolean).map((author) => (
                <a
                  href={getRelativeLocaleUrl(locale, `/authors/${author!.id}`)}
                  class="flex items-center gap-3 px-2 py-1 transition-colors hover:bg-stone-200 dark:hover:bg-stone-700"
                >
                  <Picture
                    src={author!.data.avatar}
                    alt={author!.data.name}
                    width={32}
                    height={32}
                    quality={80}
                    formats={["avif"]}
                    layout="constrained"
                    fit="cover"
                    position="center"
                    class="rounded-full select-none"
                  />

                  <div>
                    <div class="font-medium text-stone-800 dark:text-stone-100">
                      {author!.data.name}
                    </div>
                    {author!.data.location && (
                      <div class="text-sm text-stone-500">
                        {author!.data.location}
                      </div>
                    )}
                  </div>
                </a>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </SidebarBase>

  <main slot="content" class="max-w-none space-y-12">
    <header class="mb-8 space-y-6">
      <h1
        class="font-serif text-3xl leading-tight text-stone-800 dark:text-stone-100"
      >
        {post.data.title}
      </h1>

      <p class="leading-relaxed text-stone-600 dark:text-stone-400">
        {post.data.description}
      </p>

      <div class="flex flex-wrap items-center gap-2 text-stone-500 md:hidden">
        <div class="flex flex-wrap items-center gap-1">
          <PixelarticonsClock aria-hidden="true" class="h-4 w-4" />
          <span class="text-sm">
            {calculateReadTime(post.body || "")}
            min read
          </span>
        </div>

        <span aria-hidden="true"> â€¢ </span>

        <time
          datetime={post.data.publishedDate}
          class="flex flex-wrap items-center gap-1 text-sm"
        >
          <PixelarticonsCalendar aria-hidden="true" class="h-4 w-4" />
          {formattedDate}
        </time>
      </div>
    </header>

    <figure class="mb-8 overflow-hidden">
      <Picture
        src={post.data.thumbnailImg}
        alt={post.data.thumbnailImgAlt}
        width={1200}
        height={620}
        quality={80}
        formats={["avif"]}
        layout="constrained"
        fit="cover"
        position="center"
        class="aspect-video w-full select-none"
      />
    </figure>

    <hr class="border-stone-300 dark:border-stone-700" />

    <article class="prose prose-stone dark:prose-invert max-w-none">
      <Content />
    </article>

    <div class="md:hidden">
      <hr class="mb-12 border-stone-300 dark:border-stone-700" />
      <div class="mb-2 flex items-center gap-1 text-stone-500">
        <PixelarticonsHumanHandsup aria-hidden="true" class="h-4 w-4" />
        <span class="text-sm"> Published by </span>
      </div>

      <div class="flex flex-wrap gap-2">
        {
          authors.filter(Boolean).map((author) => (
            <a
              href={getRelativeLocaleUrl(locale, `/authors/${author!.id}`)}
              class="flex items-center gap-3 px-2 py-1 transition-colors hover:bg-stone-200 dark:hover:bg-stone-700"
            >
              <Picture
                src={author!.data.avatar}
                alt={author!.data.name}
                width={32}
                height={32}
                quality={80}
                formats={["avif"]}
                layout="constrained"
                fit="cover"
                position="center"
                class="rounded-full select-none"
              />

              <div>
                <div class="font-medium text-stone-800 dark:text-stone-100">
                  {author!.data.name}
                </div>
                {author!.data.location && (
                  <div class="text-sm text-stone-500">
                    {author!.data.location}
                  </div>
                )}
              </div>
            </a>
          ))
        }
      </div>
    </div>
  </main>
</LayoutBase>
