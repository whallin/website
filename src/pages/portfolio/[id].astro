---
import { Picture } from "astro:assets";
import { getCollection, render } from "astro:content";
import PixelarticonsCalendar from "../../components/icons/PixelarticonsCalendar.astro";
import PixelarticonsClock from "../../components/icons/PixelarticonsClock.astro";
import PixelarticonsFlag from "../../components/icons/PixelarticonsFlag.astro";
import SidebarBase from "../../components/navigation/SidebarBase.astro";
import LayoutBase from "../../layouts/LayoutBase.astro";

const { project } = Astro.props;
const { Content } = await render(project);
const locale = (Astro.currentLocale as "en" | "sv") ?? "en";

export async function getStaticPaths() {
  const projects = await getCollection(
    "portfolioCollection",
    ({ data }) => !data.draft,
  );
  return projects.map((project) => {
    const id = project.id.includes("/")
      ? project.id.split("/").slice(1).join("/")
      : project.id;
    return {
      params: { id },
      props: { project },
    };
  });
}

const calculateReadTime = (content: string) => {
  const wordCount = content.split(/\s+/).length;
  return Math.ceil(wordCount / 200);
};

const formattedDate = new Date(project.data.publishedDate).toLocaleDateString(
  locale,
  {
    year: "numeric",
    month: "long",
    day: "numeric",
  },
);

const articleSchema = {
  "@context": "https://schema.org",
  "@type": "CreativeWork",
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.url,
  },
  headline: project.data.title,
  description: project.data.description,
  image: project.data.thumbnailImg.src,
  author: {
    "@type": "Person",
    name: "HallinMedia",
  },
  publisher: {
    "@type": "Organization",
    name: "HallinMedia",
  },
  datePublished: new Date(project.data.publishedDate).toISOString(),
  dateModified: new Date(project.data.publishedDate).toISOString(),
  genre: project.data.category,
};

const translations = {
  en: {
    minRead: "min read",
    publishedOn: "Published on",
    featuredProject: "Featured Project",
    category: "Category",
  },
  sv: {
    minRead: "min läsning",
    publishedOn: "Publicerad",
    featuredProject: "Utvalt projekt",
    category: "Kategori",
  },
};
---

<LayoutBase schema={articleSchema} adId="portfolio-post">
  <SidebarBase showLogo showReturn slot="sidebar">
    <div slot="content">
      <div class="space-y-8">
        <div class="space-y-2 text-xs">
          <div class="flex items-center gap-1 text-stone-500">
            <PixelarticonsClock aria-hidden="true" class="h-4 w-4" />
            <span>
              {calculateReadTime(project.body || "")}
              {translations[locale].minRead}
            </span>
          </div>

          <time
            datetime={project.data.publishedDate}
            class="flex items-center gap-1 text-stone-500"
          >
            <PixelarticonsCalendar aria-hidden="true" class="h-4 w-4" />
            {formattedDate}
          </time>
        </div>

        <div class="space-y-2">
          <div class="flex items-center gap-1 text-stone-500">
            <PixelarticonsFlag aria-hidden="true" class="h-4 w-4" />
            <span class="text-sm">
              {translations[locale].category}
            </span>
          </div>

          <div
            class="w-fit rounded-full bg-red-100 px-3 py-1 text-xs font-medium tracking-tight text-red-700 dark:bg-red-900/50 dark:text-red-400"
          >
            {project.data.category}
          </div>
        </div>
      </div>
    </div>
  </SidebarBase>

  <main slot="content" class="max-w-none space-y-12">
    <header class="mb-8 space-y-6">
      <h1
        class="font-serif text-3xl leading-tight text-stone-800 dark:text-stone-100"
      >
        {project.data.title}
      </h1>

      <p class="leading-relaxed text-stone-600 dark:text-stone-400">
        {project.data.description}
      </p>

      <div class="flex flex-wrap items-center gap-2 text-stone-500 md:hidden">
        <div class="flex flex-wrap items-center gap-1">
          <PixelarticonsClock aria-hidden="true" class="h-4 w-4" />
          <span class="text-sm">
            {calculateReadTime(project.body || "")}
            {translations[locale].minRead}
          </span>
        </div>

        <span aria-hidden="true"> • </span>

        <time
          datetime={project.data.publishedDate}
          class="flex flex-wrap items-center gap-1 text-sm"
        >
          <PixelarticonsCalendar aria-hidden="true" class="h-4 w-4" />
          {formattedDate}
        </time>

        <span aria-hidden="true"> • </span>

        <div class="flex flex-wrap items-center gap-1">
          <PixelarticonsFlag aria-hidden="true" class="h-4 w-4" />
          <span class="text-sm">
            {project.data.category}
          </span>
        </div>
      </div>
    </header>

    <figure class="mb-8 overflow-hidden">
      <Picture
        src={project.data.thumbnailImg}
        alt={project.data.thumbnailImgAlt}
        width={1200}
        height={620}
        quality={80}
        formats={["avif"]}
        layout="constrained"
        fit="cover"
        position="center"
        class="aspect-video w-full select-none"
      />
    </figure>

    <hr class="border-stone-300 dark:border-stone-700" />

    <article class="prose prose-stone dark:prose-invert max-w-none">
      <Content />
    </article>
  </main>
</LayoutBase>
